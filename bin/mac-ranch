#!/bin/bash
set -o xtrace
set -e 

which docker >/dev/null 2>&1 || {
    echo "docker command not found." 1>&2
    exit 1
}

which docker-machine-driver-xhyve >/dev/null 2>&1 || {
    echo "docker-machine-driver-xhyve command not found." 1>&2
    exit 1
}

print_help()
{
    cat 1>&2 <<EOF
mac-ranch Usage:
    mac-ranch [opts]
    -c - Create world
    -d - Destroy world
    -h - Print this message
    -l - List hosts
    -r registration_url - Register another "-n" hosts using the given registration url

    -b - boot2docker URL (default: the one for v1.10.3)
    -M - Host memory in mb (default: 512)
    -n - Number of hosts (default: 3)
    -p - privileged (needed for build-master)
    -s - Server Container (default: rancher/server:latest)
            needs full container repo/name[:tag] 
EOF
}

BOOT2DOCKER="https://github.com/boot2docker/boot2docker/releases/download/v1.10.3/boot2docker.iso"
AGENT_CONTAINER="rancher/agent:latest"
SERVER_CONTAINER="rancher/server:latest"
INSTANCE_COUNT=3
NODE_MACHINE_SIZE="512"
NODE_PREFIX="dm-host-"

while getopts ":a:b:cdhlM:n:pr:s:" opt;do
    case $opt in
    a)
        AGENT_CONTAINER="${OPTARG}"
        ;;
    b)
        BOOT2DOCKER="${OPTARG}"
        ;;
    c)
        CREATE_NODES_FLAG="true"
        ;;
    d)
        DELETE_NODES_FLAG="true"
        ;;
    h)
        print_help
        exit 1
        ;;
    l)
        LIST_NODES_FLAG="true"
        ;;
    M)
        NODE_MACHINE_SIZE=${OPTARG}
        ;;
    n)
        INSTANCE_COUNT=${OPTARG}
        ;;
    p)
        PRIVILEGED_MASTER="true"
        ;;
    r)
        REGISTRATION_URL="${OPTARG}"
        ;;
    s)
        SERVER_CONTAINER="${OPTARG}"
        ;;
    \?)
        echo "Invalid arguemnts" >&2
        print_help
        exit 1
        ;;
    :)
        echo "Option -${OPTARG} requires arguement." >&2
        print_help
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

list_nodes()
{
    docker-machine ls | grep "^${NODE_PREFIX}"
}

list_node_names()
{
    (docker-machine ls -q | grep "^${NODE_PREFIX}") || echo -n ""
}

delete_nodes()
{
    local opts
    local nodes

    nodes=$(list_node_names)

    if docker inspect mac-ranch >/dev/null 2>&1; then
      docker rm -f mac-ranch
    fi

    if [[ "${nodes}" ]]; then
      docker-machine rm -y ${nodes}
    fi
}

get_master_ip()
{
    echo "192.168.64.1"
}

create_reg_tokens() # Signature: rancher_server_ip
{
    project_id=$(curl -s -X GET http://localhost:8080/v1/projects|python -c'import json,sys;print(json.load(sys.stdin)["data"][0]["id"])')
    echo $(curl -s -X POST http://localhost:8080/v1/projects/${project_id}/registrationtokens|python -c'import json,sys; print(json.load(sys.stdin)["links"]["self"])')
}

get_reg_url()
{
    ## This is a bit hacky...
    local reg_tokens_link
    reg_tokens_link=$(create_reg_tokens)
    sleep 1
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["registrationUrl"])')
}

get_run_cmd()
{
    reg_tokens_link=$(create_reg_tokens)
    sleep 1
    echo $(curl -s -X GET $reg_tokens_link|python -c'import json,sys; print(json.load(sys.stdin)["command"])')
}

build_master()
{
    privileged=""
    if [[ "${PRIVILEGED_MASTER}" = "true" ]]; then
        privileged="--privileged"
    fi

    docker run -d -p 8080:8080 ${privileged} --name=mac-ranch -e DEFAULT_CATTLE_API_HOST="$(get_master_ip):8080" ${SERVER_CONTAINER}
}

build_compute()
{
    local name

    ip_cmd="\$(ifconfig eth0 | grep 'inet ' | awk -F'[: ]+' '{ print \$4 }')"
    registration_cmd="docker run -e CATTLE_AGENT_IP=\"${ip_cmd}\" $(echo $(get_run_cmd)|sed 's/^sudo docker run//')"
    echo "${registration_cmd}"

    offset=$(list_node_names|wc -l)
    for i in $(seq $((${offset} + 1)) $((${offset} + ${INSTANCE_COUNT}))); do
        name="${NODE_PREFIX}${i}"
        docker-machine create --driver=xhyve --xhyve-boot2docker-url="${BOOT2DOCKER}" --xhyve-memory-size="${NODE_MACHINE_SIZE}" --xhyve-boot-cmd="loglevel=3 user=docker console=ttyS0 console=tty0 noembed nomodeset norestore waitusb=10 base host=${name}" ${name}
        docker-machine ssh ${name} ${registration_cmd}
    done
}

build_cluster()
{
    if [ -z "${REGISTRATION_URL}" ]; then
        build_master
        echo -n "Waiting for server to start "
        while sleep 5; do
            if [ "$(curl -s http://localhost:8080/ping)" = "pong" ]; then
                echo Success
                break
            fi
            echo -n "."
        done
    fi
    if [ "${INSTANCE_COUNT}" -gt "0" ]; then
        build_compute
    fi
}

main()
{
    if [[ "${LIST_NODES_FLAG}" = "true" ]]; then
        list_nodes
    elif [[ "${DELETE_NODES_FLAG}" = "true" ]]; then
        delete_nodes
    elif [[ "${CREATE_NODES_FLAG}" = "true" || "${REGISTRATION_URL}" ]]; then
        build_cluster
    else
        echo "Unable to take action" 1>&2
        print_help
        exit 1
    fi
}

main
